{
	"info": {
		"_postman_id": "2a2b7565-f86e-4fa6-84e5-eb09605dec8d",
		"name": "Garage-Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Correct",
			"description": null,
			"item": [
				{
					"name": "Гараж",
					"description": null,
					"item": [
						{
							"name": "[no cars] Получение списка машин гаража определённого пользователя определённого магазина G",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8f77aee-c286-40c9-b6c5-c43323f98dd7",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404, Машин в гараже нет\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/users/{{qa4abcp}}/{{ABCPmanWithoutG}}/cars",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{qa4abcp}}",
										"{{ABCPmanWithoutG}}",
										"cars"
									]
								}
							},
							"response": []
						},
						{
							"name": "[1Car]Получение списка машин гаража определённого пользователя определённого магазина G",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0d5a211-d99e-4d48-912a-651b8a1d6367",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/users/{{qa4abcp}}/{{ABCPmanWithG1C}}/cars",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{qa4abcp}}",
										"{{ABCPmanWithG1C}}",
										"cars"
									]
								},
								"description": "``` GET /users/{resellerId}/{userId}/cars ```\n\n` resellerId ` - идентификатор магазина\n` userId ` - идентификатор пользователя\n\n*Параметры*\n\n* modificationId * - уникальный идентификатор модификации автомобиля\n\n*Результат*\n200 - Операция завершилась успешно.\n400 - Не найдены автомобили указанного пользователя\n"
							},
							"response": []
						},
						{
							"name": "[3Car]Получение списка машин гаража определённого пользователя определённого магазина G Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bc088c5-ff02-480a-9463-8b4ffd29483d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/users/{{qa4abcp}}/{{ABCPmanWithG3C}}/cars",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{qa4abcp}}",
										"{{ABCPmanWithG3C}}",
										"cars"
									]
								},
								"description": "``` GET /users/{resellerId}/{userId}/cars ```\n\n` resellerId ` - идентификатор магазина\n` userId ` - идентификатор пользователя\n\n*Параметры*\n\n* modificationId * - уникальный идентификатор модификации автомобиля\n\n*Результат*\n200 - Операция завершилась успешно.\n400 - Не найдены автомобили указанного пользователя\n"
							},
							"response": []
						},
						{
							"name": "Добавление а/м в гараж",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "084f0a65-0bca-44dc-93c0-3bb041f0cb9b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Машина добавлена\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// парсим тело ответа",
											"const { car } = pm.response.json();",
											"// создаем переменную carForDelete для передачи её в DELETE запрос на удаление а/м",
											"pm.globals.set(\"carForDelete\", car.id);",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/users/{{qa4abcp}}/{{ABCPmanAddedCars}}/cars?name=%D0%A2%D0%B5%D1%81%D1%82%20%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F&modificationId={{modificationId}}&vin={{vin}}&frame&mileage={{mileage}}&comment={{comment}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{qa4abcp}}",
										"{{ABCPmanAddedCars}}",
										"cars"
									],
									"query": [
										{
											"key": "name",
											"value": "%D0%A2%D0%B5%D1%81%D1%82%20%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F"
										},
										{
											"key": "modificationId",
											"value": "{{modificationId}}"
										},
										{
											"key": "vin",
											"value": "{{vin}}"
										},
										{
											"key": "frame",
											"value": null
										},
										{
											"key": "mileage",
											"value": "{{mileage}}"
										},
										{
											"key": "comment",
											"value": "{{comment}}"
										}
									]
								},
								"description": "```POST /users/{resellerId}/{userId}/cars```\n\n`resellerId` - идентификатор магазина\n`userId` - идентификатор пользователя\n\n*Параметры*\n\n`name` - название машины, заданное пользователем для удобства выбора\n`modificationId` - уникальный идентификатор модификации автомобиля\n`vin` - vin-номер\n`frame` - frame-номер\n`mileage` - пробег\n`comment` - комментарий к автомобилю"
							},
							"response": []
						},
						{
							"name": "[no modif]Добавление а/м в гараж",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22b09f1d-5be7-4c31-93d4-4fe0728be6d7",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Необходимо указать модификацию\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/users/{{qa4abcp}}/{{ABCPmanAddedCars}}/cars?name=%D0%A2%D0%B5%D1%81%D1%82%20%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F&modificationId&vin&frame&mileage&comment",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{qa4abcp}}",
										"{{ABCPmanAddedCars}}",
										"cars"
									],
									"query": [
										{
											"key": "name",
											"value": "%D0%A2%D0%B5%D1%81%D1%82%20%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F"
										},
										{
											"key": "modificationId",
											"value": null
										},
										{
											"key": "vin",
											"value": null
										},
										{
											"key": "frame",
											"value": null
										},
										{
											"key": "mileage",
											"value": null
										},
										{
											"key": "comment",
											"value": null
										}
									]
								},
								"description": "```POST /users/{resellerId}/{userId}/cars```\n\n`resellerId` - идентификатор магазина\n`userId` - идентификатор пользователя\n\n*Параметры*\n\n`name` - название машины, заданное пользователем для удобства выбора\n`modificationId` - уникальный идентификатор модификации автомобиля\n`vin` - vin-номер\n`frame` - frame-номер\n`mileage` - пробег\n`comment` - комментарий к автомобилю"
							},
							"response": []
						},
						{
							"name": "[Все поля заполн.]Обновление а/м в гараже",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "115d225e-34ac-480f-8c70-d2c55b7abb8e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Данные не модифицированы, всё ок\", function() {",
											"    // парсим тело ответа",
											"    const { car } = pm.response.json();",
											"    ",
											"    // задаем локальные переменные согласно глобальным переменным из нашего окружения. Так короче, чем указывать функции получения переменных при сравнении:)",
											"    var GLOBAL_VIN = pm.globals.get(\"vin\");",
											"    var GLOBAL_modificationId = pm.globals.get(\"modificationId\");",
											"    var GLOBAL_mileage = pm.globals.get(\"mileage\");",
											"    var GLOBAL_comment = pm.globals.get(\"comment\");",
											"    ",
											"    // проверяем на соотвествие полей в теле ответа и глобальных переменных из окружения. не должно быть несоотвествий",
											"    pm.expect(car.vin, car.modificationId, car.mileage, car.comment).to.equal(GLOBAL_VIN, GLOBAL_modificationId, GLOBAL_mileage, GLOBAL_comment);",
											"",
											"});",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "233904b3-d646-47be-b5ce-e57aee0c9031",
										"type": "text/javascript",
										"exec": [
											"// генератор рандомных чисел",
											"        function getRandomInt(min, max) {",
											"        min = Math.ceil(min);",
											"        max = Math.floor(max);",
											"        return Math.floor(Math.random() * (max - min)) + min;",
											"        }",
											"// generate the random value",
											"var uniqName = getRandomInt(0,100)",
											"",
											"// set the value into the global variable",
											"",
											"",
											"pm.globals.set(\"uniqName\", uniqName);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test name {{uniqName}}\",\n\t\"userId\": {{ABCPmanWithG1C}},\n\t\"resellerId\": {{qa4abcp}},\n\t\"modificationId\": {{modificationId}},\n\t\"vin\": \"{{vin}}\",\n\t\"mileage\": {{mileage}},\n\t\"comment\": \"{{comment}}\"\n}"
								},
								"url": {
									"raw": "{{url}}/cars/297225",
									"host": [
										"{{url}}"
									],
									"path": [
										"cars",
										"297225"
									]
								},
								"description": "PUT /cars/{carId}\n\n`carId` - идентификатор автомобиля в гараже\nПараметры JSON\n\n`name` - название машины, заданное пользователем для удобства выбора\n`modificationId` - уникальный идентификатор модификации автомобиля\n`userId` - идентификатор пользователя\n`vin` - vin-номер\n`frame` - frame-номер\n`mileage` - пробег\n`comment` - комментарий к автомобилю"
							},
							"response": []
						},
						{
							"name": "[Только name]Обновление а/м в гараже",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "303ff1f0-ab35-46d4-8be3-eda7641904df",
										"type": "text/javascript",
										"exec": [
											"// проверяем на ответ 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// тест на проверку соотвествия параметров, не заданных в теле запроса на те, которые были установлены в прошлом PUT запросе \"[Все поля заполн.]Обновление а/м в гараже\"",
											"pm.test(\"Данные не модифицированы, всё ок\", function() {",
											"    // парсим тело ответа",
											"    const { car } = pm.response.json();",
											"    ",
											"    // задаем локальные переменные согласно глобальным переменным из нашего окружения. Так короче, чем указывать функции получения переменных при сравнении:)",
											"    var GLOBAL_VIN = pm.globals.get(\"vin\");",
											"    var GLOBAL_modificationId = parseInt(pm.globals.get(\"modificationId\"));",
											"    var GLOBAL_mileage = parseInt(pm.globals.get(\"mileage\"));",
											"    var GLOBAL_comment = pm.globals.get(\"comment\");",
											"    ",
											"    ",
											"    ",
											"    // проверяем на соотвествие полей в теле ответа и глобальных переменных из окружения",
											"    // т.к. данные поля не передавались в ответе, ожидается, что они не должны быть модифицированы",
											"    // если поля были модифицированы, следует пнуть PUT запрос с именем \"[Все поля заполн.]Обновление авт...\". Этот запрос задаст все поля в соотвествии с глобальными переменными",
											"    // по которым идет проверка",
											"    ",
											"    // vin  не модефицирован в результате запроса",
											"    pm.expect(car.vin).to.equal(GLOBAL_VIN);",
											"    ",
											"    // modificationId  не модефицирован в результате запроса",
											"    pm.expect(car.modificationId).to.equal(GLOBAL_modificationId);",
											"    ",
											"    // mileage  не модефицирован в результате запроса",
											"    pm.expect(car.mileage).to.equal(GLOBAL_mileage);",
											"    ",
											"    // comment  не модефицирован в результате запроса",
											"    pm.expect(car.comment).to.equal(GLOBAL_comment);",
											"",
											"});",
											"",
											"",
											"// удаляем ненужную переменную uniqName",
											"",
											"pm.globals.unset(\"uniqName\");",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a6007e1-339c-4fdf-9a42-13357c86a007",
										"type": "text/javascript",
										"exec": [
											"// генератор рандомных чисел",
											"        function getRandomInt(min, max) {",
											"        min = Math.ceil(min);",
											"        max = Math.floor(max);",
											"        return Math.floor(Math.random() * (max - min)) + min;",
											"        }",
											"// generate the random value",
											"var uniqName = getRandomInt(0,100)",
											"",
											"// set the value into the global variable",
											"",
											"",
											"pm.globals.set(\"uniqName\", uniqName);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test name {{uniqName}}\"\n}"
								},
								"url": {
									"raw": "{{url}}/cars/297225",
									"host": [
										"{{url}}"
									],
									"path": [
										"cars",
										"297225"
									]
								},
								"description": "PUT /cars/{carId}\n\n`carId` - идентификатор автомобиля в гараже\nПараметры JSON\n\n`name` - название машины, заданное пользователем для удобства выбора\n`modificationId` - уникальный идентификатор модификации автомобиля\n`userId` - идентификатор пользователя\n`vin` - vin-номер\n`frame` - frame-номер\n`mileage` - пробег\n`comment` - комментарий к автомобилю"
							},
							"response": []
						},
						{
							"name": "Удаление а/м из гаража",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b48de88-c644-4ef5-8ba9-6d8e3189fbac",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Машина удалена, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"pm.globals.unset(\"carForDelete\");",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/cars/{{carForDelete}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"cars",
										"{{carForDelete}}"
									]
								},
								"description": "carId для удаления берется из запроса на создание а/м в гараже:\nPOST Добавление а/м в гараж"
							},
							"response": []
						},
						{
							"name": "Доб. а/м в гараж для удаления гаража1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3b34482-d154-428b-b037-7787a3f2d29d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Машина добавлена\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// парсим тело ответа",
											"const { car } = pm.response.json();",
											"// создаем переменную carForDelete для передачи её в DELETE запрос на удаление а/м",
											"pm.globals.set(\"carForDelete\", car.id);",
											"",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/users/{{qa4abcp}}/{{ABCPmanAddedCars}}/cars?name=%D0%A2%D0%B5%D1%81%D1%82%20%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F&modificationId={{modificationId}}&vin={{vin}}&frame&mileage={{mileage}}&comment={{comment}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{qa4abcp}}",
										"{{ABCPmanAddedCars}}",
										"cars"
									],
									"query": [
										{
											"key": "name",
											"value": "%D0%A2%D0%B5%D1%81%D1%82%20%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F"
										},
										{
											"key": "modificationId",
											"value": "{{modificationId}}"
										},
										{
											"key": "vin",
											"value": "{{vin}}"
										},
										{
											"key": "frame",
											"value": null
										},
										{
											"key": "mileage",
											"value": "{{mileage}}"
										},
										{
											"key": "comment",
											"value": "{{comment}}"
										}
									]
								},
								"description": "Является вспомогательным запросом для запроса, выполняющего полное удаление гаража клиента"
							},
							"response": []
						},
						{
							"name": "Доб. а/м в гараж для удаления гаража2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "441c6b65-cfe6-4d19-8b5a-916a2652ac77",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Машина добавлена\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// парсим тело ответа",
											"const { car } = pm.response.json();",
											"// создаем переменную carForDelete для передачи её в DELETE запрос на удаление а/м",
											"pm.globals.set(\"carForDelete\", car.id);",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/users/{{qa4abcp}}/{{ABCPmanAddedCars}}/cars?name=%D0%A2%D0%B5%D1%81%D1%82%20%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F&modificationId={{modificationId}}&vin={{vin}}&frame&mileage={{mileage}}&comment={{comment}}&cardId=297225",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{qa4abcp}}",
										"{{ABCPmanAddedCars}}",
										"cars"
									],
									"query": [
										{
											"key": "name",
											"value": "%D0%A2%D0%B5%D1%81%D1%82%20%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F"
										},
										{
											"key": "modificationId",
											"value": "{{modificationId}}"
										},
										{
											"key": "vin",
											"value": "{{vin}}"
										},
										{
											"key": "frame",
											"value": null
										},
										{
											"key": "mileage",
											"value": "{{mileage}}"
										},
										{
											"key": "comment",
											"value": "{{comment}}"
										},
										{
											"key": "cardId",
											"value": "297225"
										}
									]
								},
								"description": "Является вспомогательным запросом для запроса, выполняющего полное удаление гаража клиента"
							},
							"response": []
						},
						{
							"name": "Доб. а/м в гараж для удаления гаража3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "daaceb02-8271-4be9-92f4-f8ca9c0e33b7",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Машина добавлена\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// парсим тело ответа",
											"const { car } = pm.response.json();",
											"// создаем переменную carForDelete для передачи её в DELETE запрос на удаление а/м",
											"pm.globals.set(\"carForDelete\", car.id);",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/users/{{qa4abcp}}/{{ABCPmanAddedCars}}/cars?name=%D0%A2%D0%B5%D1%81%D1%82%20%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F&modificationId={{modificationId}}&vin={{vin}}&frame&mileage={{mileage}}&comment={{comment}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{qa4abcp}}",
										"{{ABCPmanAddedCars}}",
										"cars"
									],
									"query": [
										{
											"key": "name",
											"value": "%D0%A2%D0%B5%D1%81%D1%82%20%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F"
										},
										{
											"key": "modificationId",
											"value": "{{modificationId}}"
										},
										{
											"key": "vin",
											"value": "{{vin}}"
										},
										{
											"key": "frame",
											"value": null
										},
										{
											"key": "mileage",
											"value": "{{mileage}}"
										},
										{
											"key": "comment",
											"value": "{{comment}}"
										}
									]
								},
								"description": "Является вспомогательным запросом для запроса, выполняющего полное удаление гаража клиента"
							},
							"response": []
						},
						{
							"name": "Удаление всех автомобилей из гаража пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4665294e-ba0b-4a7d-ad36-82756682ae0e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Гараж клиента удален, Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"        });",
											"        ",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"usersData\": [{\n       \"resellerId\": {{qa4abcp}},\n       \"userId\": {{ABCPmanAddedCars}}\n  }]\n }"
								},
								"url": {
									"raw": "{{url}}/cars",
									"host": [
										"{{url}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"response": []
						},
						{
							"name": "[4mc]Получение списка машин гаража определённого пользователя определённого магазина G",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0457899-e56d-4423-b563-957fcc27eeba",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/users/{{4mycar}}/{{4mcManWithG}}/cars",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{4mycar}}",
										"{{4mcManWithG}}",
										"cars"
									]
								},
								"description": "``` GET /users/{resellerId}/{userId}/cars ```\n\n` resellerId ` - идентификатор магазина\n` userId ` - идентификатор пользователя\n\n*Параметры*\n\n* modificationId * - уникальный идентификатор модификации автомобиля\n\n*Результат*\n200 - Операция завершилась успешно.\n400 - Не найдены автомобили указанного пользователя\n"
							},
							"response": []
						},
						{
							"name": "[4mc no cars]Получение списка машин гаража определённого пользователя определённого магазина G",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3455fca4-5389-410b-b1b8-d94a0b6a28ec",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404, Машин в гараже нет\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/users/{{4mycar}}/{{4mcManWithoutG}}/cars",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{4mycar}}",
										"{{4mcManWithoutG}}",
										"cars"
									]
								},
								"description": "``` GET /users/{resellerId}/{userId}/cars ```\n\n` resellerId ` - идентификатор магазина\n` userId ` - идентификатор пользователя\n\n*Параметры*\n\n* modificationId * - уникальный идентификатор модификации автомобиля\n\n*Результат*\n200 - Операция завершилась успешно.\n400 - Не найдены автомобили указанного пользователя\n"
							},
							"response": []
						},
						{
							"name": "[no modif]Добавление а/м в гараж",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ffc05ad-e2f9-4f85-aca7-530d95c61d88",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"необходимо указать модификацию\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/users/{{qa4abcp}}/{{ABCPmanAddedCars}}/cars?name=%D0%A2%D0%B5%D1%81%D1%82%20%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F&modificationId&vin&frame&mileage&comment",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{qa4abcp}}",
										"{{ABCPmanAddedCars}}",
										"cars"
									],
									"query": [
										{
											"key": "name",
											"value": "%D0%A2%D0%B5%D1%81%D1%82%20%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F"
										},
										{
											"key": "modificationId",
											"value": null
										},
										{
											"key": "vin",
											"value": null
										},
										{
											"key": "frame",
											"value": null
										},
										{
											"key": "mileage",
											"value": null
										},
										{
											"key": "comment",
											"value": null
										}
									]
								},
								"description": "```POST /users/{resellerId}/{userId}/cars```\n\n`resellerId` - идентификатор магазина\n`userId` - идентификатор пользователя\n\n*Параметры*\n\n`name` - название машины, заданное пользователем для удобства выбора\n`modificationId` - уникальный идентификатор модификации автомобиля\n`vin` - vin-номер\n`frame` - frame-номер\n`mileage` - пробег\n`comment` - комментарий к автомобилю"
							},
							"response": []
						},
						{
							"name": "Получение количества всех авто",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5894db6b-0fef-4a79-ac00-ab4582a21ddc",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/cars/count",
									"host": [
										"{{url}}"
									],
									"path": [
										"cars",
										"count"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Списки",
					"description": null,
					"item": [
						{
							"name": "Получение детальной информации об одном списке запчастей",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8ea01eb-5677-458d-8aaa-b7ce38032768",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Получен, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/lists/99",
									"host": [
										"{{url}}"
									],
									"path": [
										"lists",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение детальной информации об одном списке запчастей Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8ea01eb-5677-458d-8aaa-b7ce38032768",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Получен, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/lists/99",
									"host": [
										"{{url}}"
									],
									"path": [
										"lists",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "[без name]Добавление списка запчастей",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c673dd8a-da89-4968-b400-820006742f79",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Проверка на обязательное поле name, Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/users/{{4mycar}}/{{4mcManWithG}}/lists/create?name=&comment=123&modificationId=123",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{4mycar}}",
										"{{4mcManWithG}}",
										"lists",
										"create"
									],
									"query": [
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "comment",
											"value": "123"
										},
										{
											"key": "modificationId",
											"value": "123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление списка запчастей",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "733bec59-2cad-42c8-b643-e3ed66695d4d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var { list } = pm.response.json();",
											"pm.globals.set(\"listForDelId\", list.id);",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "488ebcd7-d77e-4181-9053-c8574cad3675",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/users/{{4mycar}}/{{4mcManWithG}}/lists/create?name=garage-api&comment=garage-api%20test",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{4mycar}}",
										"{{4mcManWithG}}",
										"lists",
										"create"
									],
									"query": [
										{
											"key": "name",
											"value": "garage-api"
										},
										{
											"key": "comment",
											"value": "garage-api%20test"
										},
										{
											"key": "modificationId",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление одной запчасти в список",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "367b1905-a643-4881-bfbb-75d734e6de89",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Статус код 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/lists/{{listForDelId}}/parts/create?brand=MERCEDES-BENZ&brandNumber=A2058350147&availability=2&forSale=0",
									"host": [
										"{{url}}"
									],
									"path": [
										"lists",
										"{{listForDelId}}",
										"parts",
										"create"
									],
									"query": [
										{
											"key": "brand",
											"value": "MERCEDES-BENZ"
										},
										{
											"key": "brandNumber",
											"value": "A2058350147"
										},
										{
											"key": "availability",
											"value": "2"
										},
										{
											"key": "forSale",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление одной запчасти в список Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "367b1905-a643-4881-bfbb-75d734e6de89",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Статус код 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/lists/{{listForDelId}}/parts/create?brand=MERCEDES-BENZ&brandNumber=A0009899701AAA4&availability=2&forSale=0",
									"host": [
										"{{url}}"
									],
									"path": [
										"lists",
										"{{listForDelId}}",
										"parts",
										"create"
									],
									"query": [
										{
											"key": "brand",
											"value": "MERCEDES-BENZ"
										},
										{
											"key": "brandNumber",
											"value": "A0009899701AAA4"
										},
										{
											"key": "availability",
											"value": "2"
										},
										{
											"key": "forSale",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[422] добавлениe запчастей в список",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80a93b81-5fde-4550-9f75-cb7821d2f1e4",
										"type": "text/javascript",
										"exec": [
											"// Дублируем запчасть в списке -ожидаем ошибку ",
											"pm.test(\"Лист не найден, ожидаем ошибку 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/lists/{{listForDelId}}/parts/create?brand=MERCEDES-BENZ&brandNumber=A2058350147&availability=2&forSale=0",
									"host": [
										"{{url}}"
									],
									"path": [
										"lists",
										"{{listForDelId}}",
										"parts",
										"create"
									],
									"query": [
										{
											"key": "brand",
											"value": "MERCEDES-BENZ"
										},
										{
											"key": "brandNumber",
											"value": "A2058350147"
										},
										{
											"key": "availability",
											"value": "2"
										},
										{
											"key": "forSale",
											"value": "0"
										}
									]
								},
								"description": "Добавление дублирующей детали в список, ожидаем получить ошибку 422"
							},
							"response": []
						},
						{
							"name": "[404] добавлениe запчастей в список-лист не найден",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9bf6de8-aa40-4eb6-acb0-197b774f1c65",
										"type": "text/javascript",
										"exec": [
											"//стучим в невалидный список - получаем ошибку",
											"pm.test(\"Статус код 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/lists/99999999/parts/create?brand=MERCEDES-BENZ&brandNumber=A2058350147&availability=2&forSale=0",
									"host": [
										"{{url}}"
									],
									"path": [
										"lists",
										"99999999",
										"parts",
										"create"
									],
									"query": [
										{
											"key": "brand",
											"value": "MERCEDES-BENZ"
										},
										{
											"key": "brandNumber",
											"value": "A2058350147"
										},
										{
											"key": "availability",
											"value": "2"
										},
										{
											"key": "forSale",
											"value": "0"
										}
									]
								},
								"description": "Добавление детали в невалидный (несуществующий) список"
							},
							"response": []
						},
						{
							"name": "Получение запчастей определённого списка",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44b741e7-cd9e-4163-99c4-cd2fe7432943",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Детальная информация получена, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" ",
											" ",
											"const { parts } = pm.response.json();",
											"console.log(parts);",
											"var firstPartForDelete = parts[0].id;",
											"console.log(firstPartForDelete);",
											"",
											"",
											"pm.globals.set(\"firstPartForDelete\", firstPartForDelete);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/lists/{{listForDelId}}/parts",
									"host": [
										"{{url}}"
									],
									"path": [
										"lists",
										"{{listForDelId}}",
										"parts"
									]
								},
								"description": "Список создан ранее в поста запросе"
							},
							"response": []
						},
						{
							"name": "Удаление запчастей из списка",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a6f3945-63d9-4758-b9cf-759cb0f330f2",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"деталь удалена, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.environment.unset(\"firstPartForDelete\");"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"parts\": [\n\t{{firstPartForDelete}}\n\t\t]\n}\n\n"
								},
								"url": {
									"raw": "{{url}}/lists/{{listForDelId}}/parts",
									"host": [
										"{{url}}"
									],
									"path": [
										"lists",
										"{{listForDelId}}",
										"parts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление списка запчастей",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cdad23b-4e10-4716-907c-a047c9f75b78",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Лист удален, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.globals.unset(\"listForDelId\");"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/lists/{{listForDelId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"lists",
										"{{listForDelId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[only comment]Обновление общей информации о списке запчастей",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f77c5681-686b-4dcd-bca6-c06f4c673fa5",
										"type": "text/javascript",
										"exec": [
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Комментарий обновлен. Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// проверяем, что после изменения коммента не изменились другие поля",
											"pm.test(\"Поля, не затрагиваемые в запросе остались без изменения, изменился только коммент\", function () {",
											"    // получаем из окружения эталонные переменные для сравнения с теми, что получили в ответе",
											"    var templateId = parseInt(pm.globals.get(\"beforeId\")); ",
											"    var templateResellerId = parseInt(pm.globals.get(\"beforeResellerId\"));",
											"    var templateUserId = parseInt(pm.globals.get(\"beforeUserId\"));",
											"    var templateModificationId = parseInt(pm.globals.get(\"beforeModificationId\"));",
											"    var templateName = pm.globals.get(\"beforeName\");",
											"    var templateComment = pm.globals.get(\"beforeComment\");    ",
											"    ",
											"    ",
											"    // парсим ответ",
											"    const { list } = pm.response.json();",
											"    // сравниваем полученный ответ с эталонным",
											"    // ожидается, что данные поля не были модифицированы",
											"    pm.expect(list.id).to.eql(templateId);",
											"    pm.expect(list.resellerId).to.eql(templateResellerId);",
											"    pm.expect(list.userId).to.eql(templateUserId);",
											"    pm.expect(list.modificationId).to.eql(templateModificationId);",
											"    pm.expect(list.name).to.eql(templateName);",
											"    // ожидается, что коммент был модифицирован",
											"    pm.expect(list.comment).to.not.eql(templateComment);",
											"});",
											"",
											"",
											"// сбрасываем коммент к дефолтному состоянию до выполнения запроса",
											"pm.sendRequest({",
											"    url: \"http://garage-api-v2.nodasrv.net/lists/185\", ",
											"    method: 'PUT',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Postman-Token': '76274c84-4a66-457f-a402-6414a924608c',",
											"        'Accept': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({\"comment\": \"comment before put request\"})",
											"    }",
											"},",
											"    function (err, res) {",
											"    console.log(res.json());",
											"});",
											"",
											"// Удаляем эталонные переменные после проверки, за ненадобностью",
											"pm.globals.unset(\"beforeId\"); ",
											"pm.globals.unset(\"beforeResellerId\");",
											"pm.globals.unset(\"beforeUserId\");",
											"pm.globals.unset(\"beforeModificationId\");",
											"pm.globals.unset(\"beforeName\");",
											"pm.globals.unset(\"beforeComment\"); ",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22aa8220-ddd5-4ac0-952d-7bc4a6ecafaa",
										"type": "text/javascript",
										"exec": [
											"",
											"// пинаем запрос с тем, чтобы получить параметры списка запчастей до модификации PUT запросом",
											"pm.sendRequest({",
											"    url: \"http://garage-api-v2.nodasrv.net/lists/185\", ",
											"    method: 'GET',",
											"    ",
											"},",
											"    function (err, res) {",
											"        if (!err) {",
											"            // парсим ответ из GET запроса",
											"            const { list } = res.json();",
											"            console.log(res)",
											"            // из ответа достаем и сэтим переменные в окружение для дальнейшего сравнения исходных данных с теми, что получим в ответе после модификации данных",
											"            pm.globals.set(\"beforeId\", list.id); ",
											"            pm.globals.set(\"beforeResellerId\", list.resellerId);",
											"            pm.globals.set(\"beforeUserId\", list.userId);",
											"            pm.globals.set(\"beforeModificationId\", list.modificationId);",
											"            pm.globals.set(\"beforeName\", list.name);",
											"            pm.globals.set(\"beforeComment\", list.comment); ",
											"            ",
											"        }",
											"    console.log(res.json());",
											"    }",
											"    ",
											"    ",
											"); ",
											"",
											" ",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n\t\"comment\": \"1234\"\n}"
								},
								"url": {
									"raw": "{{url}}/lists/185",
									"host": [
										"{{url}}"
									],
									"path": [
										"lists",
										"185"
									]
								},
								"description": "В теле запроса указан только коммент, его и модифицируем"
							},
							"response": []
						},
						{
							"name": "Получение всех списков запчастей определённого пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb788539-5273-480a-995e-8a6fececa233",
										"type": "text/javascript",
										"exec": [
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Списки получены, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/users/{{4mycar}}/{{4mcManWithG}}/lists",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{4mycar}}",
										"{{4mcManWithG}}",
										"lists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение одной запчасти из списка",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ab7c94d-550b-4477-b723-0650f86556bc",
										"type": "text/javascript",
										"exec": [
											"",
											"// Чекам скорость ответа. Если боьлше 200ms, то всё плохо",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Деталь найдена, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" ",
											" "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/lists/99/part/MERCEDES-BENZ/A1668300218",
									"host": [
										"{{url}}"
									],
									"path": [
										"lists",
										"99",
										"part",
										"MERCEDES-BENZ",
										"A1668300218"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение количества всех списков",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5894db6b-0fef-4a79-ac00-ab4582a21ddc",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/listsCount",
									"host": [
										"{{url}}"
									],
									"path": [
										"listsCount"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Incorrect",
			"description": null,
			"item": [
				{
					"name": "[несущ. а/м]Удаление а/м из гаража",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f4ec460-ea73-4c92-ac5b-e5972e11c07e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Автомобиль не найден, Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/cars/77777777777",
							"host": [
								"{{url}}"
							],
							"path": [
								"cars",
								"77777777777"
							]
						}
					},
					"response": []
				},
				{
					"name": "[не сущ. а/м]Обновление а/м в гараже",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf2f59e1-36a2-4066-ace3-ddedc20e8ac9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Автомобиль не найден, Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"new name11\",\n\t\"userId\": {{ABCPmanWithG1C}},\n\t\"resellerId\": {{qa4abcp}},\n\t\"modificationId\": {{modificationId}},\n\t\"vin\": \"{{vin}}\",\n\t\"mileage\": {{mileage}},\n\t\"comment\": \"{{comment}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/cars/77777777777",
							"host": [
								"{{url}}"
							],
							"path": [
								"cars",
								"77777777777"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Запрещ. симв.] Добавление автомобиля в гараж",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e15f7b09-3052-4298-8cc7-21f51886b96a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Машина добавлена\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/{{qa4abcp}}/{{ABCPmanAddedCars}}/cars?name=!, %, ^, %26, -, {, }, ´, `, \\.&modificationId=!, %, ^, %26, -, {, }, ´, `, \\.&vin=!, %, ^, %26, -, {, }, ´, `, \\.&frame=!, %, ^, %26, -, {, }, ´, `, \\.&mileage=!, %, ^, %26, -, {, }, ´, `, \\.&comment=!, %, ^, %26, -, {, }, ´, `, \\.",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{qa4abcp}}",
								"{{ABCPmanAddedCars}}",
								"cars"
							],
							"query": [
								{
									"key": "name",
									"value": "!, %, ^, %26, -, {, }, ´, `, \\."
								},
								{
									"key": "modificationId",
									"value": "!, %, ^, %26, -, {, }, ´, `, \\."
								},
								{
									"key": "vin",
									"value": "!, %, ^, %26, -, {, }, ´, `, \\."
								},
								{
									"key": "frame",
									"value": "!, %, ^, %26, -, {, }, ´, `, \\."
								},
								{
									"key": "mileage",
									"value": "!, %, ^, %26, -, {, }, ´, `, \\."
								},
								{
									"key": "comment",
									"value": "!, %, ^, %26, -, {, }, ´, `, \\."
								}
							]
						},
						"description": "```POST /users/{resellerId}/{userId}/cars```\n\n`resellerId` - идентификатор магазина\n`userId` - идентификатор пользователя\n\n*Параметры*\n\n`name` - название машины, заданное пользователем для удобства выбора\n`modificationId` - уникальный идентификатор модификации автомобиля\n`vin` - vin-номер\n`frame` - frame-номер\n`mileage` - пробег\n`comment` - комментарий к автомобилю"
					},
					"response": []
				},
				{
					"name": "[listId null]Удаление списка запчастей",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "440683f0-ce19-4735-90a9-80546d1b5dd3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Лист для удаления не найден, Status code is 404\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/lists/null",
							"host": [
								"{{url}}"
							],
							"path": [
								"lists",
								"null"
							]
						}
					},
					"response": []
				},
				{
					"name": "[лист ненайден]Удаление списка запчастей Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "63848d78-7297-4646-bb2a-f71e63f0c09c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Лист для удаления не найден, Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/lists/1241251283848",
							"host": [
								"{{url}}"
							],
							"path": [
								"lists",
								"1241251283848"
							]
						}
					},
					"response": []
				},
				{
					"name": "[список несуществ.]Получение детальной информации об одном списке запчастей",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "817b6761-8513-4885-bfb1-0c2bf86a1810",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Список не найден, Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Список не получен, т.к. не существует\", function () {",
									"    ",
									"    const jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.error).to.eql(\"Parts list not found\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/lists/0000",
							"host": [
								"{{url}}"
							],
							"path": [
								"lists",
								"0000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение одной запчасти из списка",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9e8541a-29ed-4fba-90c3-e033a06e6a0b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Список не найден, Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									" ",
									" pm.test(\"Список не получен, т.к. не существует\", function () {",
									"    ",
									"    const jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.error).to.eql(\"parts list not found\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/lists/9999999/parts",
							"host": [
								"{{url}}"
							],
							"path": [
								"lists",
								"9999999",
								"parts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[all par. is null]Обновление общей информации о списке запчастей",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4950adf5-dfd9-4cbc-9f53-beed8b97d484",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Комментарий обновлен. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// проверяем, что после изменения коммента не изменились другие поля",
									"pm.test(\"Поля, не затрагиваемые в запросе остались без изменения, изменился только коммент\", function () {",
									"    // получаем из окружения эталонные переменные для сравнения с теми, что получили в ответе",
									"    var templateId = parseInt(pm.globals.get(\"beforeId\")); ",
									"    var templateResellerId = parseInt(pm.globals.get(\"beforeResellerId\"));",
									"    var templateUserId = parseInt(pm.globals.get(\"beforeUserId\"));",
									"    var templateModificationId = parseInt(pm.globals.get(\"beforeModificationId\"));",
									"    var templateName = pm.globals.get(\"beforeName\");",
									"    var templateComment = pm.globals.get(\"beforeComment\");    ",
									"    ",
									"    ",
									"    // парсим ответ",
									"    const { list } = pm.response.json();",
									"    // сравниваем полученный ответ с эталонным",
									"    // ожидается, что данные поля не были модифицированы",
									"    pm.expect(list.id).to.eql(templateId);",
									"    pm.expect(list.resellerId).to.eql(templateResellerId);",
									"    pm.expect(list.userId).to.eql(templateUserId);",
									"    pm.expect(list.modificationId).to.eql(templateModificationId);",
									"    pm.expect(list.name).to.eql(templateName);",
									"    // ожидается, что коммент был модифицирован",
									"    pm.expect(list.comment).to.not.eql(templateComment);",
									"});",
									"",
									"",
									"// сбрасываем коммент к дефолтному состоянию до выполнения запроса",
									"pm.sendRequest({",
									"    url: \"http://garage-api-v2.nodasrv.net/lists/185\", ",
									"    method: 'PUT',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Postman-Token': '76274c84-4a66-457f-a402-6414a924608c',",
									"        'Accept': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({\"comment\": \"comment before put request\"})",
									"    }",
									"},",
									"    function (err, res) {",
									"    console.log(res.json());",
									"});",
									"",
									"// Удаляем эталонные переменные после проверки, за ненадобностью",
									"pm.globals.unset(\"beforeId\"); ",
									"pm.globals.unset(\"beforeResellerId\");",
									"pm.globals.unset(\"beforeUserId\");",
									"pm.globals.unset(\"beforeModificationId\");",
									"pm.globals.unset(\"beforeName\");",
									"pm.globals.unset(\"beforeComment\"); ",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b6e784da-6b93-4e57-aff8-7b833a4863e3",
								"type": "text/javascript",
								"exec": [
									"",
									"// пинаем запрос с тем, чтобы получить параметры списка запчастей до модификации PUT запросом",
									"pm.sendRequest({",
									"    url: \"http://garage-api-v2.nodasrv.net/lists/185\", ",
									"    method: 'GET',",
									"    ",
									"},",
									"    function (err, res) {",
									"        if (!err) {",
									"            // парсим ответ из GET запроса",
									"            const { list } = res.json();",
									"            console.log(res)",
									"            // из ответа достаем и сэтим переменные в окружение для дальнейшего сравнения исходных данных с теми, что получим в ответе после модификации данных",
									"            pm.globals.set(\"beforeId\", list.id); ",
									"            pm.globals.set(\"beforeResellerId\", list.resellerId);",
									"            pm.globals.set(\"beforeUserId\", list.userId);",
									"            pm.globals.set(\"beforeModificationId\", list.modificationId);",
									"            pm.globals.set(\"beforeName\", list.name);",
									"            pm.globals.set(\"beforeComment\", list.comment); ",
									"            ",
									"        }",
									"    console.log(res.json());",
									"    }",
									"    ",
									"    ",
									"); ",
									"",
									" ",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n\t\"id\": \"\",\n    \"resellerId\": \"\",\n    \"userId\": \"\",\n    \"modificationId\": \"\",\n    \"name\": \"\",\n    \"comment\": \"1234\"\n}"
						},
						"url": {
							"raw": "{{url}}/lists/185",
							"host": [
								"{{url}}"
							],
							"path": [
								"lists",
								"185"
							]
						},
						"description": "В теле запроса указаны все параметры, но значение параметров выставлены как \"\" в т.ч. для коммента. \nОжидаю, что поля \n- id\n- resellerId\n- userId\n- modificationId\nне будут модицицированы.\nКоммент изменит своё значение на \"\""
					},
					"response": []
				},
				{
					"name": "[Несущ. список]Обновление общей информации о списке запчастей",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8102644-a20c-49f5-9e78-dc34488d65fc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Ошибка. Список не найден., Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n\t\"comment\": \"1234\"\n}"
						},
						"url": {
							"raw": "{{url}}/lists/185000000",
							"host": [
								"{{url}}"
							],
							"path": [
								"lists",
								"185000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "[incorrect listId]Получение запчастей определённого списка",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d61af24-20e4-4b66-b900-e5a17aa42dbf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Некорректный ID списка, Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									" "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/lists/99999999/parts",
							"host": [
								"{{url}}"
							],
							"path": [
								"lists",
								"99999999",
								"parts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[incorrect usId]Получение всех списков запчастей определённого пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02d9f595-0169-4041-acca-39b43831ec8b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Несуществующий пользователь, списки не найдены, Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Списки не существуют, т.к. не существует такого пользователя \", function () {",
									"    const jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.error).to.eql(\"parts lists not found\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/834783748/{{4mcManWithG}}/lists",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"834783748",
								"{{4mcManWithG}}",
								"lists"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Incorrect brandNumber]Получение одной запчасти из списка",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08794bbd-91bd-49b9-b632-ecbc759eb873",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Деталь не  найдена, Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									" ",
									" "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/lists/99/part/MERCEDES-BENZ/A16683002100",
							"host": [
								"{{url}}"
							],
							"path": [
								"lists",
								"99",
								"part",
								"MERCEDES-BENZ",
								"A16683002100"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}